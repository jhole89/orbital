-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Entity.Query exposing (..)

import Entity.InputObject
import Entity.Interface
import Entity.Object
import Entity.Scalar
import Entity.ScalarCodecs
import Entity.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ConnectionsOptionalArguments =
    { id : OptionalArgument Entity.ScalarCodecs.Id
    , context : OptionalArgument String
    }


{-| Get Entity connections by ID

  - id - The ID of the Entity
  - context - The context of the Connection

-}
connections :
    (ConnectionsOptionalArguments -> ConnectionsOptionalArguments)
    -> SelectionSet decodesTo Entity.Object.Entity
    -> SelectionSet (List decodesTo) RootQuery
connections fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { id = Absent, context = Absent }

        optionalArgs____ =
            [ Argument.optional "id" filledInOptionals____.id (Entity.ScalarCodecs.codecs |> Entity.Scalar.unwrapEncoder .codecId), Argument.optional "context" filledInOptionals____.context Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "connections" optionalArgs____ object____ (identity >> Decode.list)


type alias EntityRequiredArguments =
    { id : Entity.ScalarCodecs.Id }


{-| Get entity by ID

  - id - The ID of the Entity

-}
entity :
    EntityRequiredArguments
    -> SelectionSet decodesTo Entity.Object.Entity
    -> SelectionSet (Maybe decodesTo) RootQuery
entity requiredArgs____ object____ =
    Object.selectionForCompositeField "entity" [ Argument.required "id" requiredArgs____.id (Entity.ScalarCodecs.codecs |> Entity.Scalar.unwrapEncoder .codecId) ] object____ (identity >> Decode.nullable)


{-| Get list of Entities
-}
list :
    SelectionSet decodesTo Entity.Object.Entity
    -> SelectionSet (List decodesTo) RootQuery
list object____ =
    Object.selectionForCompositeField "list" [] object____ (identity >> Decode.list)
